---
- name: "System / Package / Provision / Check required parameters"
  ansible.builtin.assert:
    quiet: true
    fail_msg: "required parameters are missing ({{
      sys_package_application | default('sys_package_application') }}/{{
      sys_package_profiles | default('sys_package_profiles')
      }})"
    that:
      - sys_package_profiles is defined
      - sys_package_application['name'] is defined
      - sys_package_application['name'] | length > 0
      - sys_package_application['type'] is defined
      - sys_package_application['type'] in sys_package_flavours
      - sys_package_application['version'] is defined
      - sys_package_application['version'] | length > 0
      - sys_package_application['installed'] is defined
      - sys_package_application['type'] in sys_package_profiles
      - sys_package_application['version'] in sys_package_profiles[sys_package_application['type']]
  when:
    - sys_package___application['supported']

- name: "System / Package / Provision / Type: {{
    sys_package___application['type'] }} (app: {{ sys_package___application['name'] }})"
  ansible.builtin.include_tasks:
    file: "{{
      'sys_package_provision_type-' + sys_package___application['type'] + '-' +
      (sys_package_application['installed']) | ternary( 'install', 'uninstall' ) + '.yml'
      }}"
  when:
    - sys_package___application['supported']
    - (
      (sys_package___application['type'] == "binary") or
      (sys_package___application['type'] == "git") or
      (sys_package___application['type'] == "brew") or
      (sys_package___application['type'] == "pip") or
      (sys_package___application['type'] == "distro" and ansible_system == "Linux") or
      (sys_package___application['type'] == "snap" and ansible_system == "Linux") or
      (sys_package___application['type'] == "flatpak" and ansible_system == "Linux") or
      (sys_package___application['type'] == "rpm" and sys_package_os_family == "RedHat") or
      (sys_package___application['type'] == "deb" and sys_package_os_family == "Ubuntu")
      )
...
