---
- name: "Manage Cloud Control Nodes"
  hosts: "cloud_control_nodes"
  gather_facts: false

  pre_tasks:

    - name: "Manage Cloud Control Nodes / Discover Target Platform"
      ansible.builtin.setup:
        gather_subset: "min"

    - name: "Manage Cloud Control Nodes / Initialize global variables"
      ansible.builtin.set_fact:
        manage_cloud_control_nodes_yum_distro: "
          {%- if (ansible_distribution == 'CentOS') or
                  (ansible_distribution == 'OracleLinux')
          -%}
            {{ 'RHEL' }}
          {%- elif (ansible_distribution == 'Fedora') -%}
            {{ 'fedora' }}
          {%- endif -%}
          "
        manage_cloud_control_nodes_deb_distro: "{{ ansible_facts['distribution_release'] | default('focal') }}"

    - name: "Manage Cloud Control Nodes / Prepare package repositories"
      vars:
        sys_repository:
          prepare: true
          deploy: true
          setup: true
          provision: true
      ansible.builtin.include_role:
        name: "serdigital64.system.sys_repository"

    - name: "Manage Cloud Control Nodes / Prepare archive manager"
      vars:
        bkp_archive:
          deploy: true
      ansible.builtin.include_role:
        name: "serdigital64.backup.bkp_archive"

    - name: "Manage Cloud Control Nodes / Prepare package installer"
      vars:
        sys_package:
          prepare: true
      ansible.builtin.include_role:
        name: "serdigital64.system.sys_package"

    - name: "Manage Cloud Control Nodes / Cloud / AWS / CLI / Prerequisite / Install OS tools"
      vars:
        sys_tools:
          deploy: true
        sys_tools_catalog:
          less: true
          groff: true
      ansible.builtin.include_role:
        name: "serdigital64.system.sys_tools"

  tasks:

    - name: "Manage Cloud Control Nodes / Provision AWS CLI"
      vars:
        cloud_aws_cli:
          prepare: true
          deploy: true
      ansible.builtin.include_role:
        name: "serdigital64.cloud.cloud_aws_cli"
      when:
        - cloud_control_nodes_apps['aws'] is defined
        - cloud_control_nodes_apps['aws']

    - name: "Manage Cloud Control Nodes / Provision Azure CLI"
      vars:
        cloud_azure_cli:
          deploy: true
      ansible.builtin.include_role:
        name: "serdigital64.cloud.cloud_azure_cli"
      when:
        - cloud_control_nodes_apps['azure'] is defined
        - cloud_control_nodes_apps['azure']

    - name: "Manage Cloud Control Nodes / Provision Google Cloud CLI"
      vars:
        cloud_google_cli:
          deploy: true
      ansible.builtin.include_role:
        name: "serdigital64.cloud.cloud_google_cli"
      when:
        - cloud_control_nodes_apps['google'] is defined
        - cloud_control_nodes_apps['google']

    - name: "Manage Cloud Control Nodes / Provision IBM Cloud CLI"
      vars:
        cloud_ibm_cli:
          deploy: true
      ansible.builtin.include_role:
        name: "serdigital64.cloud.cloud_ibm_cli"
      when:
        - cloud_control_nodes_apps['ibm'] is defined
        - cloud_control_nodes_apps['ibm']

    - name: "Manage Cloud Control Nodes / Provision Cloud Foundry CLI"
      vars:
        cloud_foundry_cli:
          deploy: true
      ansible.builtin.include_role:
        name: "serdigital64.cloud.cloud_foundry_cli"
      when:
        - cloud_control_nodes_apps['foundry'] is defined
        - cloud_control_nodes_apps['foundry']

    - name: "Manage Cloud Control Nodes / Provision Terraform tool"
      vars:
        infra_terraform:
          deploy: true
      ansible.builtin.include_role:
        name: "serdigital64.infrastructure.infra_terraform"
      when:
        - cloud_control_nodes_apps['terraform'] is defined
        - cloud_control_nodes_apps['terraform']
...
